execute pathogen#infect()

"-------------------------------------------------------------------------------
"Global settings
"-------------------------------------------------------------------------------
filetype plugin indent on	" Indent style depending on syntax
" must come before syntax enable?
syntax enable
"set number 		" numbered lines
set relativenumber 		" numbered lines
set colorcolumn=85 	" red line at 85th column
set ignorecase		" case insensitive searching
set smartcase		" case insensitive searching
set omnifunc=syntaxcomplete#Complete	" omnicompletion
set nocursorline	"  faster scrolling 
set lazyredraw		" renders vim fewer times to speed up scrolling 
set spellfile=~/.vim/spell/en.utf-8.add
set wildmenu
set wildmode=longest:full,full
"set conceallevel=2
"set clipboard=unnamed	" use system clipboard

"-------------------------------------------------------------------------------
"Global mappings
"-------------------------------------------------------------------------------
let mapleader=","
let maplocalleader=";"

" Yank to clipboard
vnoremap ,y "*y

" Easier to save 
inoremap ;w :w<Enter>
nnoremap ;w :w<Enter>
	
" Status line
"set laststatus=2 			" Always show status line
"set statusline=%F 			" Full path to file
"set statusline+=%= 			" Switch to right aligned
"set statusline+=line\ %l\ of\ %L 	" Current line / total lines

" Quickly edit/reload vimrc
nnoremap <silent> <leader>ev :vsplit ~/.vim/vimrc <CR>
nnoremap <silent> <leader>sv :so ~/.vim/vimrc <CR>

" Jump around with tags 
inoremap <leader><Tab> <Esc>/<++><CR>"_c4l
vnoremap <leader><Tab> <Esc>/<++><CR>"_c4l
nnoremap <leader><Tab> <Esc>/<++><CR>"_c4l
inoremap <leader>tag <++>

" Changing window splits
nnoremap <c-h> :wincmd h<CR>
nnoremap <c-j> :wincmd j<CR>
nnoremap <c-k> :wincmd k<CR>
nnoremap <c-l> :wincmd l<CR>
nnoremap <A-l> <C-w>>
nnoremap <A-h> <C-w><
nnoremap <leader>f <C-w>f<C-w>L
	
" Parenthesis and Brackets
"inoremap { {}<Esc>i
"inoremap {{ {
"inoremap ( ()<Esc>i
"inoremap (( (
"inoremap [ []<Esc>i
"inoremap [[ [
"inoremap " ""<Esc>i
"inoremap "" "
"inoremap ' ''<Esc>i
"inoremap '' '
	
" Wrap visual selection in delimiter
vnoremap <leader>{ <Esc>`>a}<Esc>`<i{<Esc>
vnoremap <leader>( <Esc>`>a)<Esc>`<i(<Esc>
vnoremap <leader>[ <Esc>`>a]<Esc>`<i[<Esc>
vnoremap <leader>' <Esc>`>a'<Esc>`<i'<Esc>
vnoremap <leader>" <Esc>`>a"<Esc>`<i"<Esc>
vnoremap <leader>* <Esc>`>a*<Esc>`<i*<Esc>
vnoremap <leader>** <Esc>`>a**<Esc>`<i**<Esc>
vnoremap <leader>$ <Esc>`>a$<Esc>`<i$<Esc>
vnoremap <leader>$$ <Esc>`>a$$<Esc>`<i$$<Esc>
	
" Formatting paragraphs
inoremap <leader>q gqap
nnoremap <leader>q gqap

" Moving of code blocks
vnoremap < <gv  
vnoremap > >gv  

"nnoremap <leader>s :set spell<CR>	" spell checking
"nnoremap <leader>ns :set nospell<CR>	" spell checking

" Adding comments until end of line
nnoremap <leader>- :set ri<cr>80A-<esc>81<bar>d$0:set nori<cr>

" Open URLs with gx mapping ------------------------------
" let g:netrw_browser_viewer='open' " cannot get to work
" This is my workaround 
" First disable the default gx
let g:netrw_nogx = get(g:, 'netrw_nogx', 1)
" Make function to use 'open'
function! Open(url)
  silent execute '!open ' . a:url
  redraw!
endfunction
" Call the function with gx
nnoremap  gx viW"xy \| :call Open(@x)<CR>
"---------------------------------------------------------
 
 
"-------------------------------------------------------------------------------
" Filetype settings that I don't know how to put in another vim file
"-------------------------------------------------------------------------------
let g:markdown_folding = 1	" markdown folding
let g:tex_fold_enabled=1	" latex folding  

" Python
autocmd FileType python nnoremap <leader>c :w<CR>:!clear<CR>:!python3 %<CR>

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
au BufNewFile,BufFilePre,BufRead *.snippets set filetype=snippets
au BufNewFile,BufFilePre,BufRead *.zsh,*.slurm,*.torque,*.pbs set filetype=zsh

" Shell
autocmd FileType *sh nnoremap <leader>c :w<CR>:!./%<CR>

"-------------------------------------------------------------------------------
" Plugin settings
"-------------------------------------------------------------------------------

" color scheme
colorscheme gruvbox
set background=dark 

" ultisnips
"set runtimepath-=~/.vim/bundle/ultisnips/
"let g:UltiSnipsExpandTrigger = '<tab>'
"let g:UltiSnipsJumpForwardTrigger = '<tab>'
"let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
"let g:UltiSnipsExpandTrigger       = '<C-k>'
"let g:UltiSnipsJumpForwardTrigger  = '<C-k>'
"let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
let g:UltiSnipsExpandTrigger = '<localleader><tab>'
let g:UltiSnipsJumpForwardTrigger = '<localleader><tab>'
let g:UltiSnipsJumpBackwardTrigger = '<localleader><localleader><tab>'
let g:UltiSnipsListSnippets="<localleader>u"

"" vim-markdown
let g:vim_markdown_math = 1
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0

" vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='skim'
"let g:vimtex_quickfix_mode=0
"let g:tex_conceal='abdmg'
"let g:vimtex_fold_manual

" Nerd Tree
nnoremap <localleader>n :NERDTreeFind<CR>
set encoding=utf8 " for nerdtree icons

"-------------------------------------------------------------------------------
" Experimental settings
"-------------------------------------------------------------------------------
"
"let g:vifm_home="${HOME}/.config/vifm"

" VimCompletesMe
"let g:vcm_tab_complete
let b:vcm_tab_complete = 'omni'

" Fuzzy finder
set rtp+=/usr/local/opt/fzf
nnoremap <localleader>f :FZF<CR>

" vim-rainbow
let g:rainbow_active = 1

"let g:lightline = {
"      \ 'colorscheme': 'wombat',
"      \ }
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

" COC """""""""""""""""""""""""""""""""""""""""""""""""""
"
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
"set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

let g:coc_global_extensions = [
      \'coc-markdownlint',
      \'coc-highlight',
      \'coc-python',
      \'coc-jedi',
      \'coc-texlab',
      \'coc-ultisnips',
      \'coc-git'
      \]

" Vim Wiki
let g:vimwiki_global_ext = 0
let g:vimwiki_list = [
	\{'path': '~/GD_IU/library/notes/', 'syntax': 'markdown', 'ext': '.md'},
	\{'path': '~/GD_EWR/notes/', 'syntax': 'markdown', 'ext': '.md'}]
command! Diary VimwikiDiaryIndex
augroup vimwikigroup
    autocmd!
    " automatically update links on read diary
    autocmd BufRead,BufNewFile diary.md VimwikiDiaryGenerateLinks
augroup end
let g:vimwiki_table_mappings = 0

function! ZoteroCite()
  " pick a format based on the filetype (customize at will)
  let format = &filetype =~ '.*tex' ? 'citep' : 'pandoc'
  let api_call = 'http://127.0.0.1:23119/better-bibtex/cayw?format='.format.'&brackets=1'
  let ref = system('curl -s '.shellescape(api_call))
  return ref
endfunction

noremap <leader>z "=ZoteroCite()<CR>p
inoremap <C-z> <C-r>=ZoteroCite()<CR>
