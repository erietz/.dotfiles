#!/usr/bin/env node
'use strict';

const child_process = require('child_process');

function main() {
    const args = process.argv.slice(2);

    let arg = "";
    if (args.length == 0) {
        arg = "--local";
    } else {
        arg = args[0];
    }

    switch (arg) {
        case "-l":
        case "--local":
            checkoutLocalBranch(selectBranch(getLocalBranches()));
            break;

        case "-r":
        case "--remote":
            checkoutRemoteBranch(selectBranch(getRemoteBranches()));
            break;

        default:
            console.error(printHelp());
            break;
    }
}

function printHelp() {
    const argv = process.argv
    return `Usage: ${argv[0]} ${argv[1]} <args>

    args:
        -l|--local      Checkout a local branch
        -r|--remote     Checkout a remote branch
`
}


function dieOnFail(childProcess) {
    if (childProcess.status !== 0) {
        if (childProcess.signal !== null) {
            console.log("signal", childProcess.signal);
        }
        console.log(childProcess.stdout?.toString() || "");
        console.error(childProcess.stderr?.toString() || "");
        process.exit(1);
    }
}

function getLocalBranches() {
    const cp =  child_process.spawnSync("git", ["branch"]);
    dieOnFail(cp);
    return cp.stdout.toString();
}

function getRemoteBranches() {
    const cp =  child_process.spawnSync("git", ["branch", "-r"]);
    dieOnFail(cp);
    return cp.stdout.toString();
}

// - fzf cleverly reads from /dev/tty instead of from stdin
// - fzf's tui is printed to stderr
// - the result of fzf's selection is printed to stdout
function selectBranch(branches) {
    const cp = child_process.spawnSync(
        "fzf",
        {
            input: branches,    // specifying input overrides stdio[0]
            stdio: ['pipe', 'pipe', 'inherit'] // [stdin, stdout, stderr]
        }
    )
    dieOnFail(cp);
    return cp.stdout.toString().trim();
}

function checkoutLocalBranch(branch) {
    const cp = child_process.spawnSync( "git", ["checkout", branch ]);
    dieOnFail(cp);
}

function checkoutRemoteBranch(remoteBranch) {
    const localBranch = remoteBranch.split("origin/")[1];
    const cp = child_process.spawnSync(
        "git",
        ["checkout", "-b", localBranch, remoteBranch]
    );
    dieOnFail(cp);
}

main();
